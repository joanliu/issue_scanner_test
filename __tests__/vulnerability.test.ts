import {expect, test} from '@jest/globals'
import {findMentionedVulnerabilities, getCveForGhsa} from '../src/vulnerability'
import * as dotenv from 'dotenv'
import {getOctokit} from '@actions/github'
dotenv.config()

const octokit = getOctokit(process.env.GITHUB_TOKEN || '')

describe('findMentionedVulnerabilities', () => {
  test('searches CVE ids, normalizes them', async () => {
    const input = ['CVE-5555-1234', 'cvE-2022-2222']
    const expected = ['CVE-5555-1234', 'CVE-2022-2222']
    const subject = await findMentionedVulnerabilities(input, false)

    expect(subject.toString()).toEqual(expected.toString())
  })

  test('results are unique', async () => {
    const input = ['cvE-2022-2222  cvE-2022-2222', 'cvE-2022-2222 lorem']
    const subject = await findMentionedVulnerabilities(input, false)

    expect(subject.length).toBe(1)
  })

  test('finds cve from github advisory', async () => {
    const input = ['baz GHSA-vv3r-fxqp-vr3f foo']
    const expected = ['CVE-2022-38147']
    const subject = await findMentionedVulnerabilities(input, octokit)

    expect(subject.toString()).toEqual(expected.toString())
  })

  test('results are unique across indirectly found cves', async () => {
    const input = ['CVE-2022-38147', 'GHSA-vv3r-fxqp-vr3f']
    const subject = await findMentionedVulnerabilities(input, false)

    expect(subject.length).toBe(1)
  })
})

describe('getCveForGhsa', () => {
  test('searches CVE ids, normalizes them', async () => {
    const subject = await getCveForGhsa('GHSA-vv3r-fxqp-vr3f', octokit)

    expect(subject).toEqual('CVE-2022-38147')
  })
})
