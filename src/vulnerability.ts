import {notBlank} from './utils'

export class VulnerabilityId {
  id: string

  constructor(str: string) {
    this.id = str
  }

  equals = (other): boolean => this.id === other.id

  toString = (): string => this.id
}

export async function findMentionedVulnerabilities(
  fields: string[],
  octokit
): Promise<VulnerabilityId[]> {
  const ids = fields.flatMap(scanCve).filter(notBlank)

  if (octokit) {
    const ghsa_ids = new Set(fields.flatMap(scanGhsa))

    for (const ghsa_id of ghsa_ids) {
      const cve = await getCveForGhsa(ghsa_id, octokit)
      if (cve) ids.push(cve)
    }
  }

  return [...new Set(ids)].map(id => new VulnerabilityId(id))
}

export async function getCveForGhsa(
  ghsa_id: string,
  octokit
): Promise<string | undefined> {
  const {securityAdvisory} = await octokit.graphql(`{
    securityAdvisory(ghsaId: "${ghsa_id}") {
      id
      identifiers {
        type
        value
      }
    }
  }`)

  return securityAdvisory.identifiers.find(i => i['type'] === 'CVE')?.value
}

function scanGhsa(text: string): string[] {
  const regex = /GHSA-\w{4}-\w{4}-\w{4}/gi

  return (String(text).match(regex) || []).filter(notBlank)
}

function scanCve(text: string): string[] {
  const regex = /CVE-\d{4}-\d+/gi

  return (String(text).match(regex) || [])
    .filter(notBlank)
    .map(str => str.toUpperCase())
}
